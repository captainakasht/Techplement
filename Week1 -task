import random
import string

def generate_password(length, use_uppercase, use_digits, use_special):
    """
    Generates a random password with the specified length and complexity.

    :param length: The length of the password.
    :param use_uppercase: Whether to include uppercase letters in the password.
    :param use_digits: Whether to include digits in the password.
    :param use_special: Whether to include special characters in the password.
    :return: The generated password.
    """
    # Define the character sets
    lowercase_letters = string.ascii_lowercase
    uppercase_letters = string.ascii_uppercase if use_uppercase else ''
    digits = string.digits if use_digits else ''
    special_characters = string.punctuation if use_special else ''

    # Combine the character sets
    password_characters = lowercase_letters + uppercase_letters + digits + special_characters

    # Generate the password
    password = ''.join(random.choice(password_characters) for i in range(length))

    return password

if __name__ == '__main__':
    """
    Command-line interface for generating random passwords.

    Usage:
        python password_generator.py <length> [--uppercase] [--digits] [--special]

    Arguments:
        length                  The length of the password.

    Options:
        --uppercase             Include uppercase letters in the password.
        --digits                Include digits in the password.
        --special               Include special characters in the password.

    Example:
        python password_generator.py 12 --uppercase --digits --special
    """
    import argparse

    parser = argparse.ArgumentParser(description='Generates a random password.')
    parser.add_argument('length', type=int, help='The length of the password.')
    parser.add_argument('--uppercase', action='store_true', help='Include uppercase letters in the password.')
    parser.add_argument('--digits', action='store_true', help='Include digits in the password.')
    parser.add_argument('--special', action='store_true', help='Include special characters in the password.')

    args = parser.parse_args()

    use_uppercase = args.uppercase
    use_digits = args.digits
    use_special = args.special

    password = generate_password(args.length, use_uppercase, use_digits, use_special)

    print(f'Generated password: {password}')





command 1:- python password_generator.py 12 --uppercase --digits --special
command 2:-python password_generator.py 16 --digits
command 3:-python password_generator.py 20 --uppercase --digits --special
